name: Create dependency upgrade PR-s

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      dependencies-to-update:
        description: 'JSON array with dependency names'
        required: true
        default: '["rimraf", "typescript", "node-fetch"]'
      repositories-to-update:
        description: 'JSON array with repository names'
        required: true
        default: '["lkallas/action-target-one", "lkallas/action-target-two"]'
      dry-run:
        description: 'Dry run w/o git push and PR (true|false)?'
        required: false
        default: 'true'
      branch-name:
        description: 'Branch from which the PR is made'
        required: false
        default: 'auto_upgrade_dependencies'
      labels:
        description: 'Comma separated PR labels'
        required: false
        default: 'dependencies, actions, bot'

jobs:
  setup:
    outputs:
      yarn-cache-dir: ${{ steps.prerequisites.outputs.yarn_cache_dir }}
      cache-key: ${{ steps.fill-yarn-cache.outputs.cache_key }}
    runs-on: ubuntu-latest
    steps:
      - id: prerequisites
        name: Prerequisites
        run: |
          echo "::set-output name=yarn_cache_dir::$(yarn cache dir)"
          echo "::set-output name=dependencies::$(echo '${{ github.event.inputs.dependencies-to-update }}' | sort | jq -r 'join(" ")')"

      - id: fill-yarn-cache
        name: Fill yarn cache
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc &&
          echo "yarn add ${{ steps.prerequisites.outputs.dependencies }} --ignore-scripts" &&
          yarn add ${{ steps.prerequisites.outputs.dependencies }} --ignore-scripts && rm .npmrc
          cache_key="${{ runner.os }}-yarn-cache-$(jq -r '.dependencies | to_entries | sort | [.[][]] | join("_")' package.json | sed "s/[^a-zA-Z0-9]/_/g")"
          echo "::set-output name=cache_key::$cache_key"
          echo "CACHE DIR '${{ steps.prerequisites.outputs.yarn_cache_dir }}' CONTENTS: $(ls ${{ steps.prerequisites.outputs.yarn_cache_dir }})"

      - id: cache-setup
        name: Cache setup
        uses: actions/cache@v2
        with:
          path: ${{ steps.prerequisites.outputs.yarn_cache_dir }}
          key: ${{ steps.fill-yarn-cache.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

  upgrade-dependencies:
    env:
      GITHUB_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      pull-requests: write
    strategy:
      matrix:
        repositories: ${{ fromJson(github.event.inputs.repositories-to-update) }}
      fail-fast: false
    steps:
      - id: checkout
        name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.repositories }}
          token: ${{ secrets.GH_TOKEN }}

      - id: config
        name: NPM token and git config
        run: |
          echo '${{ toJson(github.event.inputs) }}'
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "default_branch_ref=refs/heads/$DEFAULT_BRANCH" >> $GITHUB_ENV

      - id: branch-check
        name: Check upstream for branch existence
        run: |
          git fetch --all
          git --no-pager branch -a -vv
          BRANCH=$(git ls-remote --heads origin refs/heads/${{ github.event.inputs.branch-name }})
          [[ ! -z "$BRANCH" ]] && { echo "::error::Branch ${{ github.event.inputs.branch-name }} already exists upstream, aborting!"; exit 1; } || echo "Branch ${{ github.event.inputs.branch-name }} does not exist upstream, proceeding";

      - id: package-json
        name: Check package.json
        run: |
          EXISTING_DEPENDENCIES=$(jq -r 'select(.dependencies != null) | select(.devDependencies != null) | [(.dependencies, .devDependencies) | with_entries(select([.key] | inside(${{ github.event.inputs.dependencies-to-update }}))) | keys ] | flatten | join(" ")' package.json) &&
          (
              if [[ -n "$EXISTING_DEPENDENCIES" ]]; then

                  yarn_outdated_output=$(yarn outdated $EXISTING_DEPENDENCIES --json | jq -c 'select(.type=="table") | .data.body');

                  if [[ -z "$yarn_outdated_output" ]]; then
                      echo "::notice::yarn outdated returned empty result - provided dependencies are up-to-date!";
                  else
                      dependencies='';
                      for dependency_name in $EXISTING_DEPENDENCIES; do

                          dependency_version_details=$(echo "$yarn_outdated_output" | jq -r '.[] | select(contains(["'"$dependency_name"'"]))');
                          current_version=$(echo "$dependency_version_details" | jq -r '.[1]');
                          latest_version=$(echo "$dependency_version_details" | jq -r '.[3]');

                          if [ -n "$current_version" ]; then

                              echo Current "$dependency_name" version: "$current_version";
                              echo Latest "$dependency_name" version: "$latest_version";

                              if [ "$current_version" != "$latest_version" ]; then
                                  echo "$dependency_name" is outdated!;
                                  dependencies+="${dependency_name} ";
                              fi

                          else
                              echo "$dependency_name" is up-to-date, skipping...;
                          fi
                      done

                      echo "::set-output name=DEPENDENCIES::$dependencies"
                      echo Preparing to upgrade "$dependencies"
                  fi
              else
                  echo No matching dependencies found in package.json!;
              fi
          )

      - id: access-cache
        name: Setup cache
        if: steps.package-json.outputs.DEPENDENCIES != ''
        uses: actions/cache@v2
        with:
          path: ${{ needs.setup.outputs.yarn-cache-dir }}
          key: ${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-yarn-cache-

      - id: branch-yarn
        name: Checkout branch and yarn
        if: steps.package-json.outputs.DEPENDENCIES != ''
        run: |
          git checkout -b ${{ github.event.inputs.branch-name }} &&
          yarn add ${{ steps.package-json.outputs.DEPENDENCIES }} --ignore-scripts --prefer-offline &&
          rm .npmrc

      - id: changes-check
        name: Check for changes (fail if none)
        if: steps.branch-yarn.outcome == 'success'
        run: |
          [[ -z $(git status --porcelain) ]] && { echo "::error::No changes to commit! Aborting!"; exit 1; } || echo "Changes detected, proceeding...";

      - id: dry-run
        name: Dry-run announcement
        if: steps.changes-check.outcome == 'success' && github.event.inputs.dry-run == 'true'
        run: echo "::warning::Workflow started as dry-run. Not pushing to upstream and skipping PR creation!"

      - id: push
        name: Commit, push upstream
        if: steps.changes-check.outcome == 'success' && github.event.inputs.dry-run != 'true'
        run: |
          git add . &&
          git commit -m "chore: (auto)upgrade ${{ steps.package-json.outputs.DEPENDENCIES }}"
          [[ $(git push --porcelain -u origin ${{ github.event.inputs.branch-name }}) == *"Done"* ]] && echo "Pushed changes to upstream, proceeding..." || { echo "::error::Failed to push changes to upstream!"; exit 1; }

      - id: pr
        name: Create PR
        if: steps.push.outcome == 'success' && github.event.inputs.dry-run != 'true'
        run: |
          labels=$(echo ${{ github.event.inputs.labels }} | sed -r 's/\s+//g')
          PR_URL=$(hub pull-request --base ${{ env.default_branch }} --head ${{ github.event.inputs.branch-name }} -l $labels --no-edit --assign ${{ github.actor }}) &&
          [[ ! -z "$PR_URL" ]] && echo "::warning::PR created: $PR_URL" || { echo "::error::Failed to create PR!"; exit 1; }
          echo "::set-output name=PR_URL::$PR_URL"
          echo $PR_URL
