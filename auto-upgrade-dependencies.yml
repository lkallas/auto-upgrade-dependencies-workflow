name: Create dependency upgrade PR-s

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      dependencies-to-update:
        description: 'JSON array with dependency names'
        required: true
        default: '["rimraf", "typescript", "node-fetch"]'
      repositories-to-update:
        description: 'JSON array with repository names'
        required: true
        default: '["org/repo-name", "org/another-repo"]'
      branch-name:
        description: 'Branch from which the PR is made'
        required: false
        default: 'auto_upgrade_dependencies'
      labels:
        description: 'Comma separated PR labels'
        required: false
        default: 'dependencies, actions, bot'

jobs:
  upgrade-dependencies:
    env:
      GITHUB_USER: ${{ github.actor }}
      GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    strategy:
      matrix:
        repositories: ${{ fromJson(github.event.inputs.repositories-to-update) }}
      fail-fast: false
    steps:
      - id: checkout
        name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: ${{ matrix.repositories }}
          token: ${{ secrets.GH_TOKEN }}

      - id: config
        name: NPM token and git config
        run: |
          echo '${{ toJson(github.event.inputs) }}'
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
          DEFAULT_BRANCH=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_ENV
          echo "default_branch_ref=refs/heads/$DEFAULT_BRANCH" >> $GITHUB_ENV

      - id: branch-check
        name: Check upstream for branch existence
        run: |
          git fetch --all
          git --no-pager branch -a -vv
          BRANCH=$(git ls-remote --heads origin refs/heads/${{ github.event.inputs.branch-name }})
          [[ ! -z "$BRANCH" ]] && { echo "::warning::Branch ${{ github.event.inputs.branch-name }} already exists upstream, aborting!"; exit 1; } || echo "Branch ${{ github.event.inputs.branch-name }} does not exist upstream, proceeding";

      - id: package-json
        name: Check package.json
        run: |
          EXISTING_DEPENDENCIES=$(jq -r 'select(.dependencies != null) | select(.devDependencies != null) | [(.dependencies, .devDependencies) | with_entries(select([.key] | inside(${{ github.event.inputs.dependencies-to-update }}))) | keys ] | flatten | join(" ")' package.json) &&
          (
              if [[ ! -z "$EXISTING_DEPENDENCIES" ]]; then

                  yarn_outdated_output=$(yarn outdated $EXISTING_DEPENDENCIES --json | jq -r 'select(.type=="table") | .data.body');

                  if [[ -z "$yarn_outdated_output" ]]; then
                      echo "::warning::yarn outdated returned empty result - provided dependencies are up-to-date!"
                  else
                      dependencies='';
                      for dependency_name in $EXISTING_DEPENDENCIES; do

                          dependency_version_details=$(echo ${yarn_outdated_output} | jq -r '.[] | select(contains(["'$dependency_name'"]))');

                          current_version=$(echo ${dependency_version_details} | jq -r .[1]);
                          latest_version=$(echo ${dependency_version_details} | jq -r .[3]);


                          if [ ! -z "$current_version" ]; then

                              echo Current $dependency_name version: $current_version;
                              echo Latest $dependency_name version: $latest_version;

                              if [ $current_version != $latest_version ]; then
                                  echo $dependency_name is outdated!;
                                  dependencies+=" ${dependency_name}";
                              fi

                          else
                              echo $dependency_name is up-to-date, skipping...;
                          fi
                      done
                      echo "::set-output name=DEPENDENCIES::$dependencies"
                      echo Preparing to upgrade $dependencies
                  fi
              else
                  echo No matching dependencies found in package.json!;
              fi
          )

      - id: branch-yarn
        name: Checkout branch and yarn
        if: steps.package-json.outputs.DEPENDENCIES != ''
        run: |
          git checkout -b ${{ github.event.inputs.branch-name }} &&
          yarn add ${{ steps.package-json.outputs.DEPENDENCIES }} &&
          rm .npmrc

      - id: changes-check
        name: Check for changes (fail if none)
        run: |
          [[ -z $(git status --porcelain) ]] && { echo "::warning::No changes to commit! Aborting!"; exit 1; } || echo "Changes detected, proceeding...";

      - id: push
        name: Commit, push upstream
        run: |
          git add . &&
          git commit -m "chore: (auto)upgrade ${{ steps.package-json.outputs.DEPENDENCIES }}"
          [[ $(git push --porcelain -u origin ${{ github.event.inputs.branch-name }}) == *"Done"* ]] && echo "Pushed changes to upstream, proceeding..." || { echo "::error::Failed to push changes to upstream!"; exit 1; }

      - id: pr
        name: Create PR
        run: |
          labels=$(echo ${{ github.event.inputs.labels }} | sed -r 's/\s+//g')
          PR_URL=$(hub pull-request --base ${{ env.default_branch }} --head ${{ github.event.inputs.branch-name }} -l $labels --no-edit --assign ${{ github.actor }}) &&
          [[ ! -z "$PR_URL" ]] && echo "::notice::PR created: $PR_URL" || { echo "::error::Failed to create PR!"; exit 1; }
          echo "::set-output name=PR_URL::$PR_URL"
          echo $PR_URL
